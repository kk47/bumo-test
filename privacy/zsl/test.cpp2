#include <iostream>
#include <string>

#include "note.hpp"
#include "utils/util.h"
#include "merkle_tree.hpp"
#include "zsl/snark/zsl.h"
#include "utils/sha256.h"

unsigned char rho[32];
unsigned char pk[32];
unsigned char sk[32];
unsigned char send_nf[32];
unsigned char cm[32];
unsigned char proof_s[584];
uint64_t value = 0;


bool shielding()
{
    /*get_keypair(sk, pk);
    
    std::cout << "a_pk:";
    print_char_array(pk, 32);
    std::cout << "a_sk:";
    print_char_array(sk, 32);
    
    get_randomness(rho, 32);
    //std::cout << "rho:";
    //print_char_array(rho, 32);
    */
    
    std::string sk_str = "f0f0f0f00f0f0ffffffffff000000f0f0f0f0f00f0000f0f00f00f0f0f0f00ff";
    std::string pk_str = "e8e55f617b4b693083f883f70926dd5673fa434cefa3660828759947e2276348";
    std::string rho_str = "dedeffdddedeffdddedeffdddedeffdddedeffdddedeffdddedeffdddedeffdd";
    
    hex_str_to_array(sk_str, sk);
    hex_str_to_array(pk_str, pk);
    hex_str_to_array(rho_str, rho);

    value = 2378237 ;

    // zsl_prove_shielding(void *rho, void *pk, uint64_t value, void *output_proof);
    zsl_prove_shielding(rho, pk, value, proof_s);
    //std::cout << "shielding proof:";
    //print_char_array(proof_str, 32);
    
    std::cout << "rho:";
    print_char_array(rho, 32);
    std::cout << "pk:";
    print_char_array(pk, 32);

    computeSendNullifier(rho, send_nf);
    std::cout << "send_nf:";
    print_char_array(send_nf, 32);

    computeCommitment(rho, pk, value, cm);
    std::cout << "cm:";
    print_char_array(cm, 32);

    bool ret = zsl_verify_shielding(proof_s, send_nf, cm, value);
    if(!ret) {
        std::cout << "shield verify failed" << std::endl;
    } else {
        std::cout << "shield verify done" << std::endl;
    }
    return ret;
}

int main(int argc, char *argv[])
{
    zsl_initialize();
    bool ret = shielding();
    
    unsigned char a[32];
    unsigned char b[32];
    unsigned char res[32];
    std::string zero_str = "0000000000000000000000000000000000000000000000000000000000000000";
    hex_str_to_array(zero_str, a);
    hex_str_to_array(zero_str, b);

    CSHA256 hasher;
    hasher.Write(a, 32);
    hasher.Write(b, 32);
    hasher.FinalizeNoPadding(res);
    std::cout << "hash of two zero is:";
    print_char_array(res, 32);
    
    std::cout << "combine two zero str is:";
    std::cout << sha256_compress(zero_str, zero_str) << std::endl;

    return 0;
}
